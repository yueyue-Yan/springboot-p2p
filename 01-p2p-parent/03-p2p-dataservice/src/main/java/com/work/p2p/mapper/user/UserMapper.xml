<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.work.p2p.mapper.user.UserMapper">

  <resultMap id="BaseResultMap" type="com.work.p2p.beans.user.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="login_password" jdbcType="VARCHAR" property="loginPassword" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="id_card" jdbcType="VARCHAR" property="idCard" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="header_image" jdbcType="VARCHAR" property="headerImage" />
  </resultMap>

  <sql id="Base_Column_List">
    id, phone, login_password, name, id_card, add_time, last_login_time, header_image
  </sql>

    <!--查询平台的用户数量-->
  <select id="selectAllUserCount" resultType="java.lang.Integer">
    SELECT count(id) from u_user
  </select>

  <!--根据手机号返回user对象-->
  <select id="selectUserByPhone" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from u_user
    where
    phone = #{phone}
  </select>

    <!--  根据手机号和密码查询User对象-->
    <select id="selectUserByPhoneAndPwd" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from u_user
        where
        phone = #{phone} and login_password = #{loginPassword}
    </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from u_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from u_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.work.p2p.beans.user.User">
    insert into u_user (id, phone, login_password, 
      name, id_card, add_time, 
      last_login_time, header_image)
    values (#{id,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, #{loginPassword,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{idCard,jdbcType=VARCHAR}, #{addTime,jdbcType=TIMESTAMP}, 
      #{lastLoginTime,jdbcType=TIMESTAMP}, #{headerImage,jdbcType=VARCHAR})
  </insert>
    <!--给账户表的uid赋值：改造UserMapper.xml中的insertSelective方法：加入selectKey语句-->
    <!--selectKey用处：在MySQL中设置某字段自动递增，而且insert方法能返回这个生成的自增主键。-->
    <!--参数
        keyProperty：自增哪一字段
        resultType： 结果的类型
        order：	      这可以被设置为BEFORE或AFTER
                        如果设置为BEFORE,那么它会首先选择主键,设置keyProperty然后执行插入语句。
                        如果设置为AFTER,那么先执行插入语句,然后是selectKey元素（这和如 Oracle 数据库相似,可以在插入语句中嵌入序列调用）
        statementType：使用注解放方式时，在这个属性中加入需要的SQL语句）和前面的相 同,MyBatis 支持 STATEMENT ,PREPARED 和CALLABLE 语句的映射类型,分别代表 PreparedStatement 和CallableStatement 类型

    -->
  <insert id="insertSelective" parameterType="com.work.p2p.beans.user.User">
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">
      select @@IDENTITY as id
    </selectKey>

    insert into u_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="loginPassword != null">
        login_password,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="idCard != null">
        id_card,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="headerImage != null">
        header_image,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="headerImage != null">
        #{headerImage,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.work.p2p.beans.user.User">
    update u_user
    <set>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="loginPassword != null">
        login_password = #{loginPassword,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="idCard != null">
        id_card = #{idCard,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="headerImage != null">
        header_image = #{headerImage,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.work.p2p.beans.user.User">
    update u_user
    set phone = #{phone,jdbcType=VARCHAR},
      login_password = #{loginPassword,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      id_card = #{idCard,jdbcType=VARCHAR},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      header_image = #{headerImage,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>